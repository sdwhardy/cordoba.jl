    ################## loads external packages ##############################
    using Ipopt, Gurobi, JuMP, FileIO, JLD2, Dates, OrderedCollections, CSV, DataFrames
    using PyCall; ks = pyimport_conda("kshape.core", "kshape.core")
    import cordoba; const _CBD = cordoba#Cordoba package backend - under development
    import PowerModelsACDC; const _PMACDC = PowerModelsACDC
    import PowerModels; const _PM = PowerModels
    #import FlexPlan; const _FP = FlexPlan
    #import InfrastructureModels; const _IM = InfrastructureModels
    include("../aux/post_process/functions.jl")

    ################### ENTSO-E scenario description ####################################
    #casename = "cordoba_basic"
    #(10000,100),(10000,150),(10000,200),(10000,250),(10000,300),(10000,350),(10000,400),(10000,450),(10000,500),(10000,550),(10000,600),(10000,650),(10000,700),(10000,750),(10000,800),
    #(100,100),(100,150),(100,200),(100,250),(100,300),(100,350),(100,400),(100,450),(100,500),(100,550),(100,600),(100,650),(100,700),(100,750),(100,800),
    #(500,10),(475,15),(450,20),(425,25),(400,30),(375,35),(350,40),(325,45),(300,50),(275,55),(250,60),(225,65),(200,70),(175,75),(150,80)
    ics=[(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800),
(18000,100),(17000,150),(16500,200),(16000,250),(15500,300),(15000,350),(14500,400),(14000,450),(13500,500),(13000,550),(12000,600),(11500,650),(11000,700),(10500,750),(10000,800)
];#UK,DE,DK

    casename = "binary_scalling_AUTO"
    file = "./test/data/input/$casename.m"
    data = PowerModels.parse_file(file)
    candidate_ics=[21/20,1,19/20,18/20,33/40,16/20,15/20,14/20,13/20,12/20,11/20,10/20,9/20,8/20,7/20,6/20,5/20,4/20,3/20,2/20]#Candidate Cable sizes  -20
    #candidate_ics=[1,18/20,16/20,14/20,12/20,
    #10/20,8/20,6/20,4/20,2/20]#Candidate Cable sizes
    #candidate_ics=[1,19/20,17/20,15/20,13/20,11/20,9/20,7/20,5/20,3/20,1/20]#Candidate Cable sizes - 11
    #candidate_ics=[1,17/20,15/20,13/20,11/20,9/20,7/20,5/20,3/20,1/20]#Candidate Cable sizes - 10
    #candidate_ics=[1,18/20,16/20,13/20,11/20,8/20,5/20,3/20,1/20]#Candidate Cable sizes - 9
    #candidate_ics=[1,18/20,15/20,12/20,9/20,6/20,3/20,1/20]#Candidate Cable sizes - 8
    #candidate_ics=[1,17/20,14/20,11/20,8/20,5/20,2/20]#Candidate Cable sizes - 7
    #candidate_ics=[1,16/20,12/20,10/20,6/20,2/20]#Candidate Cable sizes - 6
    #candidate_ics=[1,4/5,3/5,1/2,1/4]#Candidate Cable sizes - 5
    #candidate_ics=[1]
    data=_CBD.additional_candidatesICS_DC(data,candidate_ics,ics)#adds additional candidates
    z_base_dc=(data["busdc"]["1"]["basekVdc"])^2/data["baseMVA"]
    for (i,bdc) in data["branchdc_ne"]
    data["branchdc_ne"][i]=_CBD.candidateIC_cost_impedance_DC(bdc,z_base_dc);end
    PowerModelsACDC.process_additional_data!(data)
    gurobi = JuMP.optimizer_with_attributes(Gurobi.Optimizer)
    s = Dict("output" => Dict("branch_flows" => true), "conv_losses_mp" => false, "process_data_internally" => false)
    _CBD.converter_parameters_rxb(data)
    data["branchdc_ne"]=_CBD.unique_candidateIC_DC(data["branchdc_ne"])#keep only unique candidates
    print_topology_data(data,[[],[]])

    ##
    #resultDC = run_tnepopf(data, DCPPowerModel, gurobi, setting = s)
    resultACDC = _PMACDC.run_acdctnepopf(data, _PM.DCPPowerModel, gurobi, setting = s)
    print_solution_data(resultACDC, data)

    #cv, DCbr, ACbr=PowerModelsACDC.display_results_tnep(resultDC)
